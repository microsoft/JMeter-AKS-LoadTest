parameters:
  - name: IsMultiRegionEnabled
    type: boolean
    default: false

  - name: RegionNumber
    type: number

  - name: IsClusterRequired
    type: boolean
    default: false

  - name: JmeterFolderPath
    type: string
    default: JMeterFiles

  - name: JmeterFileName
    type: string
    default: SampleTestPlan.jmx

  - name: Threads
    type: number
    default: 10

  - name: Duration
    type: number
    default: 300

  - name: Loops
    type: number
    default: 3

  - name: RampUpTime
    type: number
    default: 10

  - name: Tenant
    type: string

  - name: Namespace
    type: string

  - name: ServiceConnection
    type: string

  - name: KeyVaultName
    type: string

  - name: SecretNames
    type: string

  - name: AKSRegion
    type: string

  - name: AKSResourceGroup
    type: string

  - name: AKSClusterName
    type: string

  - name: AKSSPNClientId
    type: string

  - name: PerfTestResourceId
    type: string

  - name: PerfTestClientId
    type: string

  - name: CSVFileNames
    type: string

steps:
  - checkout: self

  - task: AzureKeyVault@1
    displayName: Get Keyvault Secrets
    inputs:
      azureSubscription: ${{ parameters.ServiceConnection }}
      KeyVaultName: ${{ parameters.KeyVaultName }}
      SecretsFilter: ${{ parameters.SecretNames }}
      RunAsPreJob: true

  - task: PowerShell@2
    displayName: Create AKS Cluster
    inputs:
      targetType: filePath
      filePath: ./Pipelines/CreateLoadTestInfrastructure.ps1
      arguments: "-tenant ${{ parameters.Tenant }} -defaultNamespace ${{ parameters.Namespace }} -resourceGroup ${{ parameters.AKSResourceGroup }} -aksClusterName ${{ parameters.AKSClusterName }} -spnClientId ${{ parameters.AKSSPNClientId }} -spnClientSecret $(AKSSPNClientSecret) -aksRegion ${{ parameters.AKSRegion }}"
    condition: "and(succeeded(), eq('${{ parameters.IsClusterRequired }}', true))"

  - task: PowerShell@2
    displayName: Update JMX File Parameters
    inputs:
      targetType: inline
      script: "# Change jmeter parameters\n\nsed -i 's/RESOURCE_ID/$(PerfTestResourceId)/g' ${{ parameters.JmeterFolderPath }}/${{ parameters.JmeterFileName }}\n\nsed -i 's/CLIENT_ID/${{ parameters.PerfTestClientId }}/g' ${{ parameters.JmeterFolderPath }}/${{ parameters.JmeterFileName }}\n\nsed -i 's/CLIENT_SECRET/${{ parameters.PerfTestClientSecret }}/g' ${{ parameters.JmeterFolderPath }}/${{ parameters.JmeterFileName }}\n\nsed -i 's/RAMP_TIME/${{ parameters.RampUpTime }}/g' ${{ parameters.JmeterFolderPath }}/${{ parameters.JmeterFileName }}\n \nsed -i 's/DURATION/${{ parameters.Duration }}/g' ${{ parameters.JmeterFolderPath }}/${{ parameters.JmeterFileName }}\n\nsed -i 's/LOOPS/${{ parameters.Loops }}/g' ${{ parameters.JmeterFolderPath }}/${{ parameters.JmeterFileName }}\n\nsed -i 's/THREADS/${{ parameters.Threads }}/g' ${{ parameters.JmeterFolderPath }}/${{ parameters.JmeterFileName }}\n"
    condition: "succeeded()"

  - task: PowerShell@2
    displayName: Run Performance in region ${{ parameters.RegionNumber }}
    inputs:
      targetType: filePath
      filePath: ./Pipelines/ExecuteInAKS.ps1
      arguments: '-AKSClusterName ${{ parameters.AKSClusterName }} -ResourceGroup ${{ parameters.AKSResourceGroup }} -SPNClientId ${{ parameters.AKSSPNClientId }} -SPNClientSecret $(AKSSPNClientSecret) -Tenant ${{ parameters.Tenant }} -Namespace ${{ parameters.Namespace }} -JMeterFolderPath ${{ parameters.JmeterFolderPath }} -JMeterFileName ${{ parameters.JmeterFileName }} -CSVFileNames "${{ parameters.CSVFileNames }}"'
      pwsh: true
    condition: "succeeded()"

  - task: PublishPipelineArtifact@1
    displayName: Publish Pipeline Artifact
    continueOnError: True
    inputs:
      path: ${{ parameters.JmeterFolderPath }}/${{ parameters.AKSClusterName }}
      artifactName: Results-region${{ parameters.RegionNumber }}-${{ parameters.Threads }}-${{ parameters.Duration }}
    condition: "succeeded()"

  - task: PowerShell@2
    displayName: Delete AKS Cluster
    inputs:
      targetType: filePath
      filePath: ./Pipelines/DeleteLoadTestInfrastructure.ps1
      arguments: "-tenant ${{ parameters.Tenant }} -aksClusterName ${{ parameters.AKSClusterName }} -resourceGroup ${{ parameters.AKSResourceGroup }} -spnClientId ${{ parameters.AKSSPNClientId }} -spnClientSecret $(AKSSPNClientSecret)"
    condition: "and(succeeded(), eq('${{ parameters.IsClusterRequired }}', true))"
