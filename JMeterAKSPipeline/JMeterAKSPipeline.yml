parameters:
  - name: IsMultiRegionEnabled
    type: boolean
    default: false

  - name: IsClusterRequired
    type: boolean
    default: false

  - name: AKSClusterName
    type: string

  - name: AKSResourceGroup
    type: string

  - name: AKSSPNClientId
    type: string

  - name: PerfTestResourceId
    type: string

  - name: PerfTestClientId
    type: string

  - name: JmeterFolderPath
    type: string
    default: JMeterFiles

  - name: JmeterFileName
    type: string
    default: SampleTestPlan.jmx

  - name: Threads
    type: number
    default: 10

  - name: Duration
    type: number
    default: 300

  - name: Loops
    type: number
    default: 3

  - name: RampUpTime
    type: number
    default: 10

variables:
  TenantId: "****"
  Namespace: "***"
  CSVFileNames: "users.csv"
  AKSClusterNameRegion1: ${{ format('"{0}Region1"', parameters.AKSClusterName) }}
  AKSClusterNameRegion2: ${{ format('"{0}Region2"', parameters.AKSClusterName) }}
  AKSResourceGroupRegion1: ${{ format('"{0}Region1"', parameters.AKSResourceGroup) }}
  AKSResourceGroupRegion2: ${{ format('"{0}Region2"', parameters.AKSResourceGroup) }}
  AKSSPNClientIdRegion1: ${{ format('"{0}Region1"', parameters.AKSResourceGroup) }}
  AKSSPNClientIdRegion2: ${{ format('"{0}Region2"', parameters.AKSResourceGroup) }}
  AKSSPNClientSecretRegion1: ""
  AKSSPNClientSecretRegion2: ""
  PerfTestClientSecret: ""

pool:
  vmImage: vs2017-win2016

jobs:
  - job: Region_1
    displayName: Performance Agent Instance 1
    steps:
      - checkout: self

      # - task: PowerShell@2
      #   displayName: Create AKS Cluster
      #   inputs:
      #     targetType: filePath
      #     filePath: ./JMeterAKSPipeline/CreateAksCluster.ps1
      #     arguments: "-AKSClusterName "
      #   condition: "and(succeeded(), eq('${{ parameters.IsClusterRequired }}', true))"

      - task: PowerShell@2
        displayName: Update JMX File Parameters
        inputs:
          targetType: inline
          script: "# Change jmeter parameters\n\nsed -i 's/RESOURCE_ID/${{ parameters.PerfTestResourceId }}/g' ${{ parameters.JmeterFolderPath }}/${{ parameters.JmeterFileName }}\n\nsed -i 's/CLIENT_ID/${{ parameters.PerfTestClientId }}/g' ${{ parameters.JmeterFolderPath }}/${{ parameters.JmeterFileName }}\n\nsed -i 's/CLIENT_SECRET/$(PerfTestClientSecret)/g' ${{ parameters.JmeterFolderPath }}/${{ parameters.JmeterFileName }}\n\nsed -i 's/RAMP_TIME/${{ parameters.RampUpTime }}/g' ${{ parameters.JmeterFolderPath }}/${{ parameters.JmeterFileName }}\n \nsed -i 's/DURATION/${{ parameters.Duration }}/g' ${{ parameters.JmeterFolderPath }}/${{ parameters.JmeterFileName }}\n\nsed -i 's/LOOPS/${{ parameters.Loops }}/g' ${{ parameters.JmeterFolderPath }}/${{ parameters.JmeterFileName }}\n\nsed -i 's/THREADS/${{ parameters.Threads }}/g' ${{ parameters.JmeterFolderPath }}/${{ parameters.JmeterFileName }}\n"

      - task: PowerShell@2
        displayName: Run Performance in Region1
        inputs:
          targetType: filePath
          filePath: ./JMeterAKSPipeline/ExecuteInAKS.ps1
          arguments: '-AKSClusterName $(AKSClusterNameRegion1) -ResourceGroup $(AKSResourceGroupRegion1) -SPNClientId $(AKSSPNClientIdRegion1) -SPNClientSecret $(AKSSPNClientSecretRegion1) -TenantId $(TenantId) -Namespace $(Namespace) -JMeterFolderPath ${{ parameters.JmeterFolderPath }} -JMeterFileName ${{ parameters.JmeterFileName }} -CSVFileNames "$(CSVFileNames)"'
          pwsh: true

      - task: PublishPipelineArtifact@1
        displayName: Publish Pipeline Artifact
        continueOnError: True
        inputs:
          path: ${{ parameters.JmeterFolderPath }}/$(AKSClusterNameRegion2)
          artifactName: Results-Region1-${{ parameters.Threads }}-${{ parameters.Duration }}

  - ${{ if eq(parameters.IsMultiRegionEnabled, true) }}:
      - job: Region_2
        displayName: Performance Agent Instance 2

        steps:
          - checkout: self

          - task: PowerShell@2
            displayName: Update Performance parameters
            inputs:
              targetType: inline
              script: "# Change jmeter parameters\n\nsed -i 's/RESOURCE_ID/${{ parameters.PerfTestResourceId }}/g' ${{ parameters.JmeterFolderPath }}/${{ parameters.JmeterFileName }}\n\nsed -i 's/CLIENT_ID/${{ parameters.PerfTestClientId }}/g' ${{ parameters.JmeterFolderPath }}/${{ parameters.JmeterFileName }}\n\nsed -i 's/CLIENT_SECRET/$(PerfTestClientSecret)/g' ${{ parameters.JmeterFolderPath }}/${{ parameters.JmeterFileName }}\n\nsed -i 's/RAMP_TIME/${{ parameters.RampUpTime }}/g' ${{ parameters.JmeterFolderPath }}/${{ parameters.JmeterFileName }}\n \nsed -i 's/DURATION/${{ parameters.Duration }}/g' ${{ parameters.JmeterFolderPath }}/${{ parameters.JmeterFileName }}\n\nsed -i 's/LOOPS/${{ parameters.Loops }}/g' ${{ parameters.JmeterFolderPath }}/${{ parameters.JmeterFileName }}\n\nsed -i 's/THREADS/${{ parameters.Threads }}/g' ${{ parameters.JmeterFolderPath }}/${{ parameters.JmeterFileName }}\n"

          - task: PowerShell@2
            displayName: Run Performance in Region2
            inputs:
              targetType: filePath
              filePath: ./JMeterAKSPipeline/ExecuteInAKS.ps1
              arguments: '-AKSClusterName $(AKSClusterNameRegion2) -ResourceGroup $(AKSResourceGroupRegion2) -SPNClientId $(AKSSPNClientIdRegion2) -SPNClientSecret $(AKSSPNClientSecretRegion2) -TenantId $(TenantId) -Namespace $(Namespace) -JMeterFolderPath ${{ parameters.JmeterFolderPath }} -JMeterFileName ${{ parameters.JmeterFileName }} -CSVFileNames "$(CSVFileNames)"'
              pwsh: true

          - task: PublishPipelineArtifact@1
            displayName: Publish Pipeline Artifact
            continueOnError: True
            inputs:
              path: ${{ parameters.JmeterFolderPath }}/$(AKSClusterNameRegion2)
              artifactName: Results-Region2-${{ parameters.Threads }}-${{ parameters.Duration }}
